/* tslint:disable */
/* eslint-disable */
/**
 * Fliggs
 * This is our cool new API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { HealthCheckV1200ResponseInfoValue } from './HealthCheckV1200ResponseInfoValue';
import {
    HealthCheckV1200ResponseInfoValueFromJSON,
    HealthCheckV1200ResponseInfoValueFromJSONTyped,
    HealthCheckV1200ResponseInfoValueToJSON,
    HealthCheckV1200ResponseInfoValueToJSONTyped,
} from './HealthCheckV1200ResponseInfoValue';

/**
 * 
 * @export
 * @interface HealthCheckV1200Response
 */
export interface HealthCheckV1200Response {
    /**
     * 
     * @type {string}
     * @memberof HealthCheckV1200Response
     */
    status?: string;
    /**
     * 
     * @type {{ [key: string]: HealthCheckV1200ResponseInfoValue; }}
     * @memberof HealthCheckV1200Response
     */
    info?: { [key: string]: HealthCheckV1200ResponseInfoValue; } | null;
    /**
     * 
     * @type {{ [key: string]: HealthCheckV1200ResponseInfoValue; }}
     * @memberof HealthCheckV1200Response
     */
    error?: { [key: string]: HealthCheckV1200ResponseInfoValue; } | null;
    /**
     * 
     * @type {{ [key: string]: HealthCheckV1200ResponseInfoValue; }}
     * @memberof HealthCheckV1200Response
     */
    details?: { [key: string]: HealthCheckV1200ResponseInfoValue; };
}

/**
 * Check if a given object implements the HealthCheckV1200Response interface.
 */
export function instanceOfHealthCheckV1200Response(value: object): value is HealthCheckV1200Response {
    return true;
}

export function HealthCheckV1200ResponseFromJSON(json: any): HealthCheckV1200Response {
    return HealthCheckV1200ResponseFromJSONTyped(json, false);
}

export function HealthCheckV1200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): HealthCheckV1200Response {
    if (json == null) {
        return json;
    }
    return {
        
        'status': json['status'] == null ? undefined : json['status'],
        'info': json['info'] == null ? undefined : (mapValues(json['info'], HealthCheckV1200ResponseInfoValueFromJSON)),
        'error': json['error'] == null ? undefined : (mapValues(json['error'], HealthCheckV1200ResponseInfoValueFromJSON)),
        'details': json['details'] == null ? undefined : (mapValues(json['details'], HealthCheckV1200ResponseInfoValueFromJSON)),
    };
}

export function HealthCheckV1200ResponseToJSON(json: any): HealthCheckV1200Response {
    return HealthCheckV1200ResponseToJSONTyped(json, false);
}

export function HealthCheckV1200ResponseToJSONTyped(value?: HealthCheckV1200Response | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'status': value['status'],
        'info': value['info'] == null ? undefined : (mapValues(value['info'], HealthCheckV1200ResponseInfoValueToJSON)),
        'error': value['error'] == null ? undefined : (mapValues(value['error'], HealthCheckV1200ResponseInfoValueToJSON)),
        'details': value['details'] == null ? undefined : (mapValues(value['details'], HealthCheckV1200ResponseInfoValueToJSON)),
    };
}

