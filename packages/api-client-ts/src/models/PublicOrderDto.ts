/* tslint:disable */
/* eslint-disable */
/**
 * Fliggs
 * This is our cool new API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OrderStatus } from './OrderStatus';
import {
    OrderStatusFromJSON,
    OrderStatusFromJSONTyped,
    OrderStatusToJSON,
    OrderStatusToJSONTyped,
} from './OrderStatus';
import type { OrderType } from './OrderType';
import {
    OrderTypeFromJSON,
    OrderTypeFromJSONTyped,
    OrderTypeToJSON,
    OrderTypeToJSONTyped,
} from './OrderType';

/**
 * 
 * @export
 * @interface PublicOrderDto
 */
export interface PublicOrderDto {
    /**
     * 
     * @type {OrderType}
     * @memberof PublicOrderDto
     */
    type: OrderType;
    /**
     * 
     * @type {OrderStatus}
     * @memberof PublicOrderDto
     */
    status: OrderStatus;
    /**
     * 
     * @type {string}
     * @memberof PublicOrderDto
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof PublicOrderDto
     */
    startedAt: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof PublicOrderDto
     */
    completedAt: Date | null;
    /**
     * 
     * @type {string}
     * @memberof PublicOrderDto
     */
    subscriptionId: string | null;
}



/**
 * Check if a given object implements the PublicOrderDto interface.
 */
export function instanceOfPublicOrderDto(value: object): value is PublicOrderDto {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('startedAt' in value) || value['startedAt'] === undefined) return false;
    if (!('completedAt' in value) || value['completedAt'] === undefined) return false;
    if (!('subscriptionId' in value) || value['subscriptionId'] === undefined) return false;
    return true;
}

export function PublicOrderDtoFromJSON(json: any): PublicOrderDto {
    return PublicOrderDtoFromJSONTyped(json, false);
}

export function PublicOrderDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): PublicOrderDto {
    if (json == null) {
        return json;
    }
    return {
        
        'type': OrderTypeFromJSON(json['type']),
        'status': OrderStatusFromJSON(json['status']),
        'id': json['id'],
        'startedAt': (json['startedAt'] == null ? null : new Date(json['startedAt'])),
        'completedAt': (json['completedAt'] == null ? null : new Date(json['completedAt'])),
        'subscriptionId': json['subscriptionId'],
    };
}

export function PublicOrderDtoToJSON(json: any): PublicOrderDto {
    return PublicOrderDtoToJSONTyped(json, false);
}

export function PublicOrderDtoToJSONTyped(value?: PublicOrderDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': OrderTypeToJSON(value['type']),
        'status': OrderStatusToJSON(value['status']),
        'id': value['id'],
        'startedAt': (value['startedAt'] == null ? null : (value['startedAt'] as any).toISOString()),
        'completedAt': (value['completedAt'] == null ? null : (value['completedAt'] as any).toISOString()),
        'subscriptionId': value['subscriptionId'],
    };
}

