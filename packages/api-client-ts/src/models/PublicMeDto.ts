/* tslint:disable */
/* eslint-disable */
/**
 * Fliggs
 * This is our cool new API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PublicUserSettingsDto } from './PublicUserSettingsDto';
import {
    PublicUserSettingsDtoFromJSON,
    PublicUserSettingsDtoFromJSONTyped,
    PublicUserSettingsDtoToJSON,
    PublicUserSettingsDtoToJSONTyped,
} from './PublicUserSettingsDto';

/**
 * 
 * @export
 * @interface PublicMeDto
 */
export interface PublicMeDto {
    /**
     * 
     * @type {boolean}
     * @memberof PublicMeDto
     */
    isNewWalletEnabled: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PublicMeDto
     */
    isPromoCodeFieldEnabled: boolean;
    /**
     * 
     * @type {string}
     * @memberof PublicMeDto
     */
    provider: string;
    /**
     * 
     * @type {string}
     * @memberof PublicMeDto
     */
    strategy: string;
    /**
     * 
     * @type {string}
     * @memberof PublicMeDto
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof PublicMeDto
     */
    createdAt: Date;
    /**
     * 
     * @type {string}
     * @memberof PublicMeDto
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof PublicMeDto
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof PublicMeDto
     */
    lastName: string;
    /**
     * 
     * @type {PublicUserSettingsDto}
     * @memberof PublicMeDto
     */
    settings: PublicUserSettingsDto;
}

/**
 * Check if a given object implements the PublicMeDto interface.
 */
export function instanceOfPublicMeDto(value: object): value is PublicMeDto {
    if (!('isNewWalletEnabled' in value) || value['isNewWalletEnabled'] === undefined) return false;
    if (!('isPromoCodeFieldEnabled' in value) || value['isPromoCodeFieldEnabled'] === undefined) return false;
    if (!('provider' in value) || value['provider'] === undefined) return false;
    if (!('strategy' in value) || value['strategy'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('firstName' in value) || value['firstName'] === undefined) return false;
    if (!('lastName' in value) || value['lastName'] === undefined) return false;
    if (!('settings' in value) || value['settings'] === undefined) return false;
    return true;
}

export function PublicMeDtoFromJSON(json: any): PublicMeDto {
    return PublicMeDtoFromJSONTyped(json, false);
}

export function PublicMeDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): PublicMeDto {
    if (json == null) {
        return json;
    }
    return {
        
        'isNewWalletEnabled': json['isNewWalletEnabled'],
        'isPromoCodeFieldEnabled': json['isPromoCodeFieldEnabled'],
        'provider': json['provider'],
        'strategy': json['strategy'],
        'id': json['id'],
        'createdAt': (new Date(json['createdAt'])),
        'email': json['email'],
        'firstName': json['firstName'],
        'lastName': json['lastName'],
        'settings': PublicUserSettingsDtoFromJSON(json['settings']),
    };
}

export function PublicMeDtoToJSON(json: any): PublicMeDto {
    return PublicMeDtoToJSONTyped(json, false);
}

export function PublicMeDtoToJSONTyped(value?: PublicMeDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'isNewWalletEnabled': value['isNewWalletEnabled'],
        'isPromoCodeFieldEnabled': value['isPromoCodeFieldEnabled'],
        'provider': value['provider'],
        'strategy': value['strategy'],
        'id': value['id'],
        'createdAt': ((value['createdAt']).toISOString()),
        'email': value['email'],
        'firstName': value['firstName'],
        'lastName': value['lastName'],
        'settings': PublicUserSettingsDtoToJSON(value['settings']),
    };
}

