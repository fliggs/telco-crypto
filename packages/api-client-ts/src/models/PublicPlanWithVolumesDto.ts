/* tslint:disable */
/* eslint-disable */
/**
 * Fliggs
 * This is our cool new API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PublicContentDto } from './PublicContentDto';
import {
    PublicContentDtoFromJSON,
    PublicContentDtoFromJSONTyped,
    PublicContentDtoToJSON,
    PublicContentDtoToJSONTyped,
} from './PublicContentDto';
import type { PublicVolumeDto } from './PublicVolumeDto';
import {
    PublicVolumeDtoFromJSON,
    PublicVolumeDtoFromJSONTyped,
    PublicVolumeDtoToJSON,
    PublicVolumeDtoToJSONTyped,
} from './PublicVolumeDto';

/**
 * 
 * @export
 * @interface PublicPlanWithVolumesDto
 */
export interface PublicPlanWithVolumesDto {
    /**
     * 
     * @type {PublicContentDto}
     * @memberof PublicPlanWithVolumesDto
     */
    content: PublicContentDto;
    /**
     * 
     * @type {string}
     * @memberof PublicPlanWithVolumesDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof PublicPlanWithVolumesDto
     */
    name: string;
    /**
     * 
     * @type {boolean}
     * @memberof PublicPlanWithVolumesDto
     */
    isStandalone: boolean;
    /**
     * 
     * @type {number}
     * @memberof PublicPlanWithVolumesDto
     */
    validForSeconds: number;
    /**
     * 
     * @type {boolean}
     * @memberof PublicPlanWithVolumesDto
     */
    doesAutoRenew: boolean;
    /**
     * 
     * @type {Array<PublicVolumeDto>}
     * @memberof PublicPlanWithVolumesDto
     */
    volumes: Array<PublicVolumeDto>;
}

/**
 * Check if a given object implements the PublicPlanWithVolumesDto interface.
 */
export function instanceOfPublicPlanWithVolumesDto(value: object): value is PublicPlanWithVolumesDto {
    if (!('content' in value) || value['content'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('isStandalone' in value) || value['isStandalone'] === undefined) return false;
    if (!('validForSeconds' in value) || value['validForSeconds'] === undefined) return false;
    if (!('doesAutoRenew' in value) || value['doesAutoRenew'] === undefined) return false;
    if (!('volumes' in value) || value['volumes'] === undefined) return false;
    return true;
}

export function PublicPlanWithVolumesDtoFromJSON(json: any): PublicPlanWithVolumesDto {
    return PublicPlanWithVolumesDtoFromJSONTyped(json, false);
}

export function PublicPlanWithVolumesDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): PublicPlanWithVolumesDto {
    if (json == null) {
        return json;
    }
    return {
        
        'content': PublicContentDtoFromJSON(json['content']),
        'id': json['id'],
        'name': json['name'],
        'isStandalone': json['isStandalone'],
        'validForSeconds': json['validForSeconds'],
        'doesAutoRenew': json['doesAutoRenew'],
        'volumes': ((json['volumes'] as Array<any>).map(PublicVolumeDtoFromJSON)),
    };
}

export function PublicPlanWithVolumesDtoToJSON(json: any): PublicPlanWithVolumesDto {
    return PublicPlanWithVolumesDtoToJSONTyped(json, false);
}

export function PublicPlanWithVolumesDtoToJSONTyped(value?: PublicPlanWithVolumesDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'content': PublicContentDtoToJSON(value['content']),
        'id': value['id'],
        'name': value['name'],
        'isStandalone': value['isStandalone'],
        'validForSeconds': value['validForSeconds'],
        'doesAutoRenew': value['doesAutoRenew'],
        'volumes': ((value['volumes'] as Array<any>).map(PublicVolumeDtoToJSON)),
    };
}

