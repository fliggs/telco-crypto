/* tslint:disable */
/* eslint-disable */
/**
 * Fliggs
 * This is our cool new API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { ContentBlockImageDto } from './ContentBlockImageDto';
import {
    instanceOfContentBlockImageDto,
    ContentBlockImageDtoFromJSON,
    ContentBlockImageDtoFromJSONTyped,
    ContentBlockImageDtoToJSON,
} from './ContentBlockImageDto';
import type { ContentBlockListDto } from './ContentBlockListDto';
import {
    instanceOfContentBlockListDto,
    ContentBlockListDtoFromJSON,
    ContentBlockListDtoFromJSONTyped,
    ContentBlockListDtoToJSON,
} from './ContentBlockListDto';
import type { ContentBlockSeparatorDto } from './ContentBlockSeparatorDto';
import {
    instanceOfContentBlockSeparatorDto,
    ContentBlockSeparatorDtoFromJSON,
    ContentBlockSeparatorDtoFromJSONTyped,
    ContentBlockSeparatorDtoToJSON,
} from './ContentBlockSeparatorDto';
import type { ContentBlockSpacerDto } from './ContentBlockSpacerDto';
import {
    instanceOfContentBlockSpacerDto,
    ContentBlockSpacerDtoFromJSON,
    ContentBlockSpacerDtoFromJSONTyped,
    ContentBlockSpacerDtoToJSON,
} from './ContentBlockSpacerDto';
import type { ContentBlockTextDto } from './ContentBlockTextDto';
import {
    instanceOfContentBlockTextDto,
    ContentBlockTextDtoFromJSON,
    ContentBlockTextDtoFromJSONTyped,
    ContentBlockTextDtoToJSON,
} from './ContentBlockTextDto';

/**
 * @type PublicContentDtoSummary
 * 
 * @export
 */
export type PublicContentDtoSummary = { type: 'image' } & ContentBlockImageDto | { type: 'list' } & ContentBlockListDto | { type: 'separator' } & ContentBlockSeparatorDto | { type: 'spacer' } & ContentBlockSpacerDto | { type: 'text' } & ContentBlockTextDto;

export function PublicContentDtoSummaryFromJSON(json: any): PublicContentDtoSummary {
    return PublicContentDtoSummaryFromJSONTyped(json, false);
}

export function PublicContentDtoSummaryFromJSONTyped(json: any, ignoreDiscriminator: boolean): PublicContentDtoSummary {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'image':
            return Object.assign({}, ContentBlockImageDtoFromJSONTyped(json, true), { type: 'image' } as const);
        case 'list':
            return Object.assign({}, ContentBlockListDtoFromJSONTyped(json, true), { type: 'list' } as const);
        case 'separator':
            return Object.assign({}, ContentBlockSeparatorDtoFromJSONTyped(json, true), { type: 'separator' } as const);
        case 'spacer':
            return Object.assign({}, ContentBlockSpacerDtoFromJSONTyped(json, true), { type: 'spacer' } as const);
        case 'text':
            return Object.assign({}, ContentBlockTextDtoFromJSONTyped(json, true), { type: 'text' } as const);
        default:
            throw new Error(`No variant of PublicContentDtoSummary exists with 'type=${json['type']}'`);
    }
}

export function PublicContentDtoSummaryToJSON(json: any): any {
    return PublicContentDtoSummaryToJSONTyped(json, false);
}

export function PublicContentDtoSummaryToJSONTyped(value?: PublicContentDtoSummary | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'image':
            return Object.assign({}, ContentBlockImageDtoToJSON(value), { type: 'image' } as const);
        case 'list':
            return Object.assign({}, ContentBlockListDtoToJSON(value), { type: 'list' } as const);
        case 'separator':
            return Object.assign({}, ContentBlockSeparatorDtoToJSON(value), { type: 'separator' } as const);
        case 'spacer':
            return Object.assign({}, ContentBlockSpacerDtoToJSON(value), { type: 'spacer' } as const);
        case 'text':
            return Object.assign({}, ContentBlockTextDtoToJSON(value), { type: 'text' } as const);
        default:
            throw new Error(`No variant of PublicContentDtoSummary exists with 'type=${value['type']}'`);
    }

}

