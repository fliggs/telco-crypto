/* tslint:disable */
/* eslint-disable */
/**
 * Fliggs
 * This is our cool new API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PublicContentDto,
  PublicCountryDto,
  PublicDeviceDto,
} from '../models/index';
import {
    PublicContentDtoFromJSON,
    PublicContentDtoToJSON,
    PublicCountryDtoFromJSON,
    PublicCountryDtoToJSON,
    PublicDeviceDtoFromJSON,
    PublicDeviceDtoToJSON,
} from '../models/index';

export interface SettingsGetFaqsV1Request {
    xAuthProvider?: string;
    xAuthStrategy?: string;
}

export interface SettingsGetOrderStepRetriesV1Request {
    xAuthProvider?: string;
    xAuthStrategy?: string;
}

export interface SettingsGetPrivacyPolicyV1Request {
    xAuthProvider?: string;
    xAuthStrategy?: string;
}

export interface SettingsGetPrivacyPolicyV2Request {
    xAuthProvider?: string;
    xAuthStrategy?: string;
}

export interface SettingsGetSupportedCountriesV1Request {
    name?: any;
    xAuthProvider?: string;
    xAuthStrategy?: string;
}

export interface SettingsGetSupportedDevicesV1Request {
    name?: any;
    xAuthProvider?: string;
    xAuthStrategy?: string;
}

export interface SettingsGetTermsAndConditionsV1Request {
    xAuthProvider?: string;
    xAuthStrategy?: string;
}

export interface SettingsGetTermsAndConditionsV2Request {
    xAuthProvider?: string;
    xAuthStrategy?: string;
}

/**
 * SettingsApi - interface
 * 
 * @export
 * @interface SettingsApiInterface
 */
export interface SettingsApiInterface {
    /**
     * 
     * @param {string} [xAuthProvider] 
     * @param {string} [xAuthStrategy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApiInterface
     */
    settingsGetFaqsV1Raw(requestParameters: SettingsGetFaqsV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicContentDto>>;

    /**
     */
    settingsGetFaqsV1(requestParameters: SettingsGetFaqsV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicContentDto>;

    /**
     * 
     * @param {string} [xAuthProvider] 
     * @param {string} [xAuthStrategy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApiInterface
     */
    settingsGetOrderStepRetriesV1Raw(requestParameters: SettingsGetOrderStepRetriesV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<number>>>;

    /**
     */
    settingsGetOrderStepRetriesV1(requestParameters: SettingsGetOrderStepRetriesV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<number>>;

    /**
     * 
     * @param {string} [xAuthProvider] 
     * @param {string} [xAuthStrategy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApiInterface
     */
    settingsGetPrivacyPolicyV1Raw(requestParameters: SettingsGetPrivacyPolicyV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>>;

    /**
     */
    settingsGetPrivacyPolicyV1(requestParameters: SettingsGetPrivacyPolicyV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>>;

    /**
     * 
     * @param {string} [xAuthProvider] 
     * @param {string} [xAuthStrategy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApiInterface
     */
    settingsGetPrivacyPolicyV2Raw(requestParameters: SettingsGetPrivacyPolicyV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicContentDto>>;

    /**
     */
    settingsGetPrivacyPolicyV2(requestParameters: SettingsGetPrivacyPolicyV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicContentDto>;

    /**
     * 
     * @param {any} [name] 
     * @param {string} [xAuthProvider] 
     * @param {string} [xAuthStrategy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApiInterface
     */
    settingsGetSupportedCountriesV1Raw(requestParameters: SettingsGetSupportedCountriesV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PublicCountryDto>>>;

    /**
     */
    settingsGetSupportedCountriesV1(requestParameters: SettingsGetSupportedCountriesV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PublicCountryDto>>;

    /**
     * 
     * @param {any} [name] 
     * @param {string} [xAuthProvider] 
     * @param {string} [xAuthStrategy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApiInterface
     */
    settingsGetSupportedDevicesV1Raw(requestParameters: SettingsGetSupportedDevicesV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PublicDeviceDto>>>;

    /**
     */
    settingsGetSupportedDevicesV1(requestParameters: SettingsGetSupportedDevicesV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PublicDeviceDto>>;

    /**
     * 
     * @param {string} [xAuthProvider] 
     * @param {string} [xAuthStrategy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApiInterface
     */
    settingsGetTermsAndConditionsV1Raw(requestParameters: SettingsGetTermsAndConditionsV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>>;

    /**
     */
    settingsGetTermsAndConditionsV1(requestParameters: SettingsGetTermsAndConditionsV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>>;

    /**
     * 
     * @param {string} [xAuthProvider] 
     * @param {string} [xAuthStrategy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApiInterface
     */
    settingsGetTermsAndConditionsV2Raw(requestParameters: SettingsGetTermsAndConditionsV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicContentDto>>;

    /**
     */
    settingsGetTermsAndConditionsV2(requestParameters: SettingsGetTermsAndConditionsV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicContentDto>;

}

/**
 * 
 */
export class SettingsApi extends runtime.BaseAPI implements SettingsApiInterface {

    /**
     */
    async settingsGetFaqsV1Raw(requestParameters: SettingsGetFaqsV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicContentDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAuthProvider'] != null) {
            headerParameters['x-auth-provider'] = String(requestParameters['xAuthProvider']);
        }

        if (requestParameters['xAuthStrategy'] != null) {
            headerParameters['x-auth-strategy'] = String(requestParameters['xAuthStrategy']);
        }

        const response = await this.request({
            path: `/v1/settings/faqs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicContentDtoFromJSON(jsonValue));
    }

    /**
     */
    async settingsGetFaqsV1(requestParameters: SettingsGetFaqsV1Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicContentDto> {
        const response = await this.settingsGetFaqsV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async settingsGetOrderStepRetriesV1Raw(requestParameters: SettingsGetOrderStepRetriesV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<number>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAuthProvider'] != null) {
            headerParameters['x-auth-provider'] = String(requestParameters['xAuthProvider']);
        }

        if (requestParameters['xAuthStrategy'] != null) {
            headerParameters['x-auth-strategy'] = String(requestParameters['xAuthStrategy']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/settings/order-step-retries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async settingsGetOrderStepRetriesV1(requestParameters: SettingsGetOrderStepRetriesV1Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<number>> {
        const response = await this.settingsGetOrderStepRetriesV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async settingsGetPrivacyPolicyV1Raw(requestParameters: SettingsGetPrivacyPolicyV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAuthProvider'] != null) {
            headerParameters['x-auth-provider'] = String(requestParameters['xAuthProvider']);
        }

        if (requestParameters['xAuthStrategy'] != null) {
            headerParameters['x-auth-strategy'] = String(requestParameters['xAuthStrategy']);
        }

        const response = await this.request({
            path: `/v1/settings/privacy-policy`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async settingsGetPrivacyPolicyV1(requestParameters: SettingsGetPrivacyPolicyV1Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.settingsGetPrivacyPolicyV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async settingsGetPrivacyPolicyV2Raw(requestParameters: SettingsGetPrivacyPolicyV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicContentDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAuthProvider'] != null) {
            headerParameters['x-auth-provider'] = String(requestParameters['xAuthProvider']);
        }

        if (requestParameters['xAuthStrategy'] != null) {
            headerParameters['x-auth-strategy'] = String(requestParameters['xAuthStrategy']);
        }

        const response = await this.request({
            path: `/v2/settings/privacy-policy`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicContentDtoFromJSON(jsonValue));
    }

    /**
     */
    async settingsGetPrivacyPolicyV2(requestParameters: SettingsGetPrivacyPolicyV2Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicContentDto> {
        const response = await this.settingsGetPrivacyPolicyV2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async settingsGetSupportedCountriesV1Raw(requestParameters: SettingsGetSupportedCountriesV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PublicCountryDto>>> {
        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAuthProvider'] != null) {
            headerParameters['x-auth-provider'] = String(requestParameters['xAuthProvider']);
        }

        if (requestParameters['xAuthStrategy'] != null) {
            headerParameters['x-auth-strategy'] = String(requestParameters['xAuthStrategy']);
        }

        const response = await this.request({
            path: `/v1/settings/supported-countries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PublicCountryDtoFromJSON));
    }

    /**
     */
    async settingsGetSupportedCountriesV1(requestParameters: SettingsGetSupportedCountriesV1Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PublicCountryDto>> {
        const response = await this.settingsGetSupportedCountriesV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async settingsGetSupportedDevicesV1Raw(requestParameters: SettingsGetSupportedDevicesV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PublicDeviceDto>>> {
        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAuthProvider'] != null) {
            headerParameters['x-auth-provider'] = String(requestParameters['xAuthProvider']);
        }

        if (requestParameters['xAuthStrategy'] != null) {
            headerParameters['x-auth-strategy'] = String(requestParameters['xAuthStrategy']);
        }

        const response = await this.request({
            path: `/v1/settings/supported-devices`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PublicDeviceDtoFromJSON));
    }

    /**
     */
    async settingsGetSupportedDevicesV1(requestParameters: SettingsGetSupportedDevicesV1Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PublicDeviceDto>> {
        const response = await this.settingsGetSupportedDevicesV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async settingsGetTermsAndConditionsV1Raw(requestParameters: SettingsGetTermsAndConditionsV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAuthProvider'] != null) {
            headerParameters['x-auth-provider'] = String(requestParameters['xAuthProvider']);
        }

        if (requestParameters['xAuthStrategy'] != null) {
            headerParameters['x-auth-strategy'] = String(requestParameters['xAuthStrategy']);
        }

        const response = await this.request({
            path: `/v1/settings/terms-conditions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async settingsGetTermsAndConditionsV1(requestParameters: SettingsGetTermsAndConditionsV1Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.settingsGetTermsAndConditionsV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async settingsGetTermsAndConditionsV2Raw(requestParameters: SettingsGetTermsAndConditionsV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicContentDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAuthProvider'] != null) {
            headerParameters['x-auth-provider'] = String(requestParameters['xAuthProvider']);
        }

        if (requestParameters['xAuthStrategy'] != null) {
            headerParameters['x-auth-strategy'] = String(requestParameters['xAuthStrategy']);
        }

        const response = await this.request({
            path: `/v2/settings/terms-conditions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicContentDtoFromJSON(jsonValue));
    }

    /**
     */
    async settingsGetTermsAndConditionsV2(requestParameters: SettingsGetTermsAndConditionsV2Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicContentDto> {
        const response = await this.settingsGetTermsAndConditionsV2Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
