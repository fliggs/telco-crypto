/* tslint:disable */
/* eslint-disable */
/**
 * Fliggs
 * This is our cool new API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CheckCoverageDto,
  CheckPortInDto,
  PublicCoverageDto,
  PublicPortInDto,
} from '../models/index';
import {
    CheckCoverageDtoFromJSON,
    CheckCoverageDtoToJSON,
    CheckPortInDtoFromJSON,
    CheckPortInDtoToJSON,
    PublicCoverageDtoFromJSON,
    PublicCoverageDtoToJSON,
    PublicPortInDtoFromJSON,
    PublicPortInDtoToJSON,
} from '../models/index';

export interface TelcoCheckCoverageV1Request {
    checkCoverageDto: CheckCoverageDto;
    xAuthProvider?: string;
    xAuthStrategy?: string;
}

export interface TelcoCheckPortInV1Request {
    checkPortInDto: CheckPortInDto;
    xAuthProvider?: string;
    xAuthStrategy?: string;
}

/**
 * TelcoApi - interface
 * 
 * @export
 * @interface TelcoApiInterface
 */
export interface TelcoApiInterface {
    /**
     * 
     * @param {CheckCoverageDto} checkCoverageDto 
     * @param {string} [xAuthProvider] 
     * @param {string} [xAuthStrategy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TelcoApiInterface
     */
    telcoCheckCoverageV1Raw(requestParameters: TelcoCheckCoverageV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicCoverageDto>>;

    /**
     */
    telcoCheckCoverageV1(requestParameters: TelcoCheckCoverageV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicCoverageDto>;

    /**
     * 
     * @param {CheckPortInDto} checkPortInDto 
     * @param {string} [xAuthProvider] 
     * @param {string} [xAuthStrategy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TelcoApiInterface
     */
    telcoCheckPortInV1Raw(requestParameters: TelcoCheckPortInV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicPortInDto>>;

    /**
     */
    telcoCheckPortInV1(requestParameters: TelcoCheckPortInV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicPortInDto>;

}

/**
 * 
 */
export class TelcoApi extends runtime.BaseAPI implements TelcoApiInterface {

    /**
     */
    async telcoCheckCoverageV1Raw(requestParameters: TelcoCheckCoverageV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicCoverageDto>> {
        if (requestParameters['checkCoverageDto'] == null) {
            throw new runtime.RequiredError(
                'checkCoverageDto',
                'Required parameter "checkCoverageDto" was null or undefined when calling telcoCheckCoverageV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xAuthProvider'] != null) {
            headerParameters['x-auth-provider'] = String(requestParameters['xAuthProvider']);
        }

        if (requestParameters['xAuthStrategy'] != null) {
            headerParameters['x-auth-strategy'] = String(requestParameters['xAuthStrategy']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/telco/check-coverage`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CheckCoverageDtoToJSON(requestParameters['checkCoverageDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicCoverageDtoFromJSON(jsonValue));
    }

    /**
     */
    async telcoCheckCoverageV1(requestParameters: TelcoCheckCoverageV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicCoverageDto> {
        const response = await this.telcoCheckCoverageV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async telcoCheckPortInV1Raw(requestParameters: TelcoCheckPortInV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicPortInDto>> {
        if (requestParameters['checkPortInDto'] == null) {
            throw new runtime.RequiredError(
                'checkPortInDto',
                'Required parameter "checkPortInDto" was null or undefined when calling telcoCheckPortInV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xAuthProvider'] != null) {
            headerParameters['x-auth-provider'] = String(requestParameters['xAuthProvider']);
        }

        if (requestParameters['xAuthStrategy'] != null) {
            headerParameters['x-auth-strategy'] = String(requestParameters['xAuthStrategy']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/telco/check-portin`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CheckPortInDtoToJSON(requestParameters['checkPortInDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicPortInDtoFromJSON(jsonValue));
    }

    /**
     */
    async telcoCheckPortInV1(requestParameters: TelcoCheckPortInV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicPortInDto> {
        const response = await this.telcoCheckPortInV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
