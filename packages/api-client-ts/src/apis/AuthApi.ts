/* tslint:disable */
/* eslint-disable */
/**
 * Fliggs
 * This is our cool new API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthAppleExchangeCallbackDto,
  AuthAppleLoginRedeemDto,
  AuthGoogleExchangeCallbackDto,
  AuthGoogleLoginRedeemDto,
  AuthOpenIdExchangeCallbackDto,
  AuthOpenIdLoginRedeemDto,
  ChangeUnverifiedEmailDto,
  LoginDto,
  PublicAuthAppleExchangeDto,
  PublicAuthGoogleExchangeDto,
  PublicAuthStrategyDto,
  PublicExchangeDto,
  PublicSessionTokensDto,
  RefreshDto,
  ResetPasswordDto,
  ResetVerifyDto,
  SetPasswordDto,
  SignupDto,
  VerifyDto,
} from '../models/index';
import {
    AuthAppleExchangeCallbackDtoFromJSON,
    AuthAppleExchangeCallbackDtoToJSON,
    AuthAppleLoginRedeemDtoFromJSON,
    AuthAppleLoginRedeemDtoToJSON,
    AuthGoogleExchangeCallbackDtoFromJSON,
    AuthGoogleExchangeCallbackDtoToJSON,
    AuthGoogleLoginRedeemDtoFromJSON,
    AuthGoogleLoginRedeemDtoToJSON,
    AuthOpenIdExchangeCallbackDtoFromJSON,
    AuthOpenIdExchangeCallbackDtoToJSON,
    AuthOpenIdLoginRedeemDtoFromJSON,
    AuthOpenIdLoginRedeemDtoToJSON,
    ChangeUnverifiedEmailDtoFromJSON,
    ChangeUnverifiedEmailDtoToJSON,
    LoginDtoFromJSON,
    LoginDtoToJSON,
    PublicAuthAppleExchangeDtoFromJSON,
    PublicAuthAppleExchangeDtoToJSON,
    PublicAuthGoogleExchangeDtoFromJSON,
    PublicAuthGoogleExchangeDtoToJSON,
    PublicAuthStrategyDtoFromJSON,
    PublicAuthStrategyDtoToJSON,
    PublicExchangeDtoFromJSON,
    PublicExchangeDtoToJSON,
    PublicSessionTokensDtoFromJSON,
    PublicSessionTokensDtoToJSON,
    RefreshDtoFromJSON,
    RefreshDtoToJSON,
    ResetPasswordDtoFromJSON,
    ResetPasswordDtoToJSON,
    ResetVerifyDtoFromJSON,
    ResetVerifyDtoToJSON,
    SetPasswordDtoFromJSON,
    SetPasswordDtoToJSON,
    SignupDtoFromJSON,
    SignupDtoToJSON,
    VerifyDtoFromJSON,
    VerifyDtoToJSON,
} from '../models/index';

export interface AuthAppleExchangeCallbackV2Request {
    strategy: string;
    authAppleExchangeCallbackDto: AuthAppleExchangeCallbackDto;
    xAuthProvider?: string;
    xAuthStrategy?: string;
}

export interface AuthAppleExchangeStartV2Request {
    strategy: string;
    xAuthProvider?: string;
    xAuthStrategy?: string;
}

export interface AuthAppleExchangeV1Request {
    strategy: string;
    authAppleExchangeCallbackDto: AuthAppleExchangeCallbackDto;
    xAuthProvider?: string;
    xAuthStrategy?: string;
}

export interface AuthAppleFindStrategiesV1Request {
    admin: boolean;
    xAuthProvider?: string;
    xAuthStrategy?: string;
}

export interface AuthAppleLoginRedeemV1Request {
    strategy: string;
    authAppleLoginRedeemDto: AuthAppleLoginRedeemDto;
    xAuthProvider?: string;
    xAuthStrategy?: string;
}

export interface AuthAppleSetupV1Request {
    strategy: string;
    xAuthProvider?: string;
    xAuthStrategy?: string;
}

export interface AuthFindStrategiesV1Request {
    admin: boolean;
    xAuthProvider?: string;
    xAuthStrategy?: string;
}

export interface AuthGoogleExchangeCallbackV1Request {
    strategy: string;
    authGoogleExchangeCallbackDto: AuthGoogleExchangeCallbackDto;
    xAuthProvider?: string;
    xAuthStrategy?: string;
}

export interface AuthGoogleExchangeCallbackV2Request {
    strategy: string;
    authGoogleExchangeCallbackDto: AuthGoogleExchangeCallbackDto;
    xAuthProvider?: string;
    xAuthStrategy?: string;
}

export interface AuthGoogleExchangeStartV1Request {
    strategy: string;
    xAuthProvider?: string;
    xAuthStrategy?: string;
}

export interface AuthGoogleExchangeStartV2Request {
    strategy: string;
    xAuthProvider?: string;
    xAuthStrategy?: string;
}

export interface AuthGoogleFindStrategiesV1Request {
    admin: boolean;
    xAuthProvider?: string;
    xAuthStrategy?: string;
}

export interface AuthGoogleLoginRedeemV1Request {
    strategy: string;
    authGoogleLoginRedeemDto: AuthGoogleLoginRedeemDto;
    xAuthProvider?: string;
    xAuthStrategy?: string;
}

export interface AuthLogoutV1Request {
    xAuthProvider?: string;
    xAuthStrategy?: string;
}

export interface AuthRefreshV1Request {
    refreshToken?: string;
    xAuthProvider?: string;
    xAuthStrategy?: string;
    refreshDto?: RefreshDto;
}

export interface LocalChangeEmailV1Request {
    strategy: string;
    changeUnverifiedEmailDto: ChangeUnverifiedEmailDto;
    xAuthProvider?: string;
    xAuthStrategy?: string;
}

export interface LocalFindStrategiesV1Request {
    admin: boolean;
    xAuthProvider?: string;
    xAuthStrategy?: string;
}

export interface LocalLoginV1Request {
    strategy: string;
    loginDto: LoginDto;
    xAuthProvider?: string;
    xAuthStrategy?: string;
}

export interface LocalResetPasswordV1Request {
    strategy: string;
    resetPasswordDto: ResetPasswordDto;
    xAuthProvider?: string;
    xAuthStrategy?: string;
}

export interface LocalResetVerifyV1Request {
    strategy: string;
    resetVerifyDto: ResetVerifyDto;
    xAuthProvider?: string;
    xAuthStrategy?: string;
}

export interface LocalSetPasswordV1Request {
    strategy: string;
    setPasswordDto: SetPasswordDto;
    xAuthProvider?: string;
    xAuthStrategy?: string;
}

export interface LocalSignupV1Request {
    strategy: string;
    signupDto: SignupDto;
    xAuthProvider?: string;
    xAuthStrategy?: string;
}

export interface LocalVerifyV1Request {
    strategy: string;
    verifyDto: VerifyDto;
    xAuthProvider?: string;
    xAuthStrategy?: string;
}

export interface OpenIdExchangeCallbackV1Request {
    strategy: string;
    authOpenIdExchangeCallbackDto: AuthOpenIdExchangeCallbackDto;
    xAuthProvider?: string;
    xAuthStrategy?: string;
}

export interface OpenIdExchangeStartV1Request {
    strategy: string;
    xAuthProvider?: string;
    xAuthStrategy?: string;
}

export interface OpenIdFindStrategiesV1Request {
    admin: boolean;
    xAuthProvider?: string;
    xAuthStrategy?: string;
}

export interface OpenIdLoginRedeemV1Request {
    strategy: string;
    authOpenIdLoginRedeemDto: AuthOpenIdLoginRedeemDto;
    xAuthProvider?: string;
    xAuthStrategy?: string;
}

/**
 * AuthApi - interface
 * 
 * @export
 * @interface AuthApiInterface
 */
export interface AuthApiInterface {
    /**
     * 
     * @param {string} strategy 
     * @param {AuthAppleExchangeCallbackDto} authAppleExchangeCallbackDto 
     * @param {string} [xAuthProvider] 
     * @param {string} [xAuthStrategy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authAppleExchangeCallbackV2Raw(requestParameters: AuthAppleExchangeCallbackV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicSessionTokensDto>>;

    /**
     */
    authAppleExchangeCallbackV2(requestParameters: AuthAppleExchangeCallbackV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicSessionTokensDto>;

    /**
     * 
     * @param {string} strategy 
     * @param {string} [xAuthProvider] 
     * @param {string} [xAuthStrategy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authAppleExchangeStartV2Raw(requestParameters: AuthAppleExchangeStartV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicAuthAppleExchangeDto>>;

    /**
     */
    authAppleExchangeStartV2(requestParameters: AuthAppleExchangeStartV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicAuthAppleExchangeDto>;

    /**
     * 
     * @param {string} strategy 
     * @param {AuthAppleExchangeCallbackDto} authAppleExchangeCallbackDto 
     * @param {string} [xAuthProvider] 
     * @param {string} [xAuthStrategy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authAppleExchangeV1Raw(requestParameters: AuthAppleExchangeV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicSessionTokensDto>>;

    /**
     */
    authAppleExchangeV1(requestParameters: AuthAppleExchangeV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicSessionTokensDto>;

    /**
     * 
     * @param {boolean} admin 
     * @param {string} [xAuthProvider] 
     * @param {string} [xAuthStrategy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authAppleFindStrategiesV1Raw(requestParameters: AuthAppleFindStrategiesV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PublicAuthStrategyDto>>>;

    /**
     */
    authAppleFindStrategiesV1(requestParameters: AuthAppleFindStrategiesV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PublicAuthStrategyDto>>;

    /**
     * 
     * @param {string} strategy 
     * @param {AuthAppleLoginRedeemDto} authAppleLoginRedeemDto 
     * @param {string} [xAuthProvider] 
     * @param {string} [xAuthStrategy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authAppleLoginRedeemV1Raw(requestParameters: AuthAppleLoginRedeemV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicSessionTokensDto>>;

    /**
     */
    authAppleLoginRedeemV1(requestParameters: AuthAppleLoginRedeemV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicSessionTokensDto>;

    /**
     * 
     * @param {string} strategy 
     * @param {string} [xAuthProvider] 
     * @param {string} [xAuthStrategy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authAppleSetupV1Raw(requestParameters: AuthAppleSetupV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicAuthAppleExchangeDto>>;

    /**
     */
    authAppleSetupV1(requestParameters: AuthAppleSetupV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicAuthAppleExchangeDto>;

    /**
     * 
     * @param {boolean} admin 
     * @param {string} [xAuthProvider] 
     * @param {string} [xAuthStrategy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authFindStrategiesV1Raw(requestParameters: AuthFindStrategiesV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PublicAuthStrategyDto>>>;

    /**
     */
    authFindStrategiesV1(requestParameters: AuthFindStrategiesV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PublicAuthStrategyDto>>;

    /**
     * 
     * @param {string} strategy 
     * @param {AuthGoogleExchangeCallbackDto} authGoogleExchangeCallbackDto 
     * @param {string} [xAuthProvider] 
     * @param {string} [xAuthStrategy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authGoogleExchangeCallbackV1Raw(requestParameters: AuthGoogleExchangeCallbackV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicSessionTokensDto>>;

    /**
     */
    authGoogleExchangeCallbackV1(requestParameters: AuthGoogleExchangeCallbackV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicSessionTokensDto>;

    /**
     * 
     * @param {string} strategy 
     * @param {AuthGoogleExchangeCallbackDto} authGoogleExchangeCallbackDto 
     * @param {string} [xAuthProvider] 
     * @param {string} [xAuthStrategy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authGoogleExchangeCallbackV2Raw(requestParameters: AuthGoogleExchangeCallbackV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicSessionTokensDto>>;

    /**
     */
    authGoogleExchangeCallbackV2(requestParameters: AuthGoogleExchangeCallbackV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicSessionTokensDto>;

    /**
     * 
     * @param {string} strategy 
     * @param {string} [xAuthProvider] 
     * @param {string} [xAuthStrategy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authGoogleExchangeStartV1Raw(requestParameters: AuthGoogleExchangeStartV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicAuthGoogleExchangeDto>>;

    /**
     */
    authGoogleExchangeStartV1(requestParameters: AuthGoogleExchangeStartV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicAuthGoogleExchangeDto>;

    /**
     * 
     * @param {string} strategy 
     * @param {string} [xAuthProvider] 
     * @param {string} [xAuthStrategy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authGoogleExchangeStartV2Raw(requestParameters: AuthGoogleExchangeStartV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicAuthGoogleExchangeDto>>;

    /**
     */
    authGoogleExchangeStartV2(requestParameters: AuthGoogleExchangeStartV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicAuthGoogleExchangeDto>;

    /**
     * 
     * @param {boolean} admin 
     * @param {string} [xAuthProvider] 
     * @param {string} [xAuthStrategy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authGoogleFindStrategiesV1Raw(requestParameters: AuthGoogleFindStrategiesV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PublicAuthStrategyDto>>>;

    /**
     */
    authGoogleFindStrategiesV1(requestParameters: AuthGoogleFindStrategiesV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PublicAuthStrategyDto>>;

    /**
     * 
     * @param {string} strategy 
     * @param {AuthGoogleLoginRedeemDto} authGoogleLoginRedeemDto 
     * @param {string} [xAuthProvider] 
     * @param {string} [xAuthStrategy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authGoogleLoginRedeemV1Raw(requestParameters: AuthGoogleLoginRedeemV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicSessionTokensDto>>;

    /**
     */
    authGoogleLoginRedeemV1(requestParameters: AuthGoogleLoginRedeemV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicSessionTokensDto>;

    /**
     * 
     * @param {string} [xAuthProvider] 
     * @param {string} [xAuthStrategy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authLogoutV1Raw(requestParameters: AuthLogoutV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    authLogoutV1(requestParameters: AuthLogoutV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} [refreshToken] 
     * @param {string} [xAuthProvider] 
     * @param {string} [xAuthStrategy] 
     * @param {RefreshDto} [refreshDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authRefreshV1Raw(requestParameters: AuthRefreshV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicSessionTokensDto>>;

    /**
     */
    authRefreshV1(requestParameters: AuthRefreshV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicSessionTokensDto>;

    /**
     * 
     * @param {string} strategy 
     * @param {ChangeUnverifiedEmailDto} changeUnverifiedEmailDto 
     * @param {string} [xAuthProvider] 
     * @param {string} [xAuthStrategy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    localChangeEmailV1Raw(requestParameters: LocalChangeEmailV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    localChangeEmailV1(requestParameters: LocalChangeEmailV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {boolean} admin 
     * @param {string} [xAuthProvider] 
     * @param {string} [xAuthStrategy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    localFindStrategiesV1Raw(requestParameters: LocalFindStrategiesV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PublicAuthStrategyDto>>>;

    /**
     */
    localFindStrategiesV1(requestParameters: LocalFindStrategiesV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PublicAuthStrategyDto>>;

    /**
     * 
     * @param {string} strategy 
     * @param {LoginDto} loginDto 
     * @param {string} [xAuthProvider] 
     * @param {string} [xAuthStrategy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    localLoginV1Raw(requestParameters: LocalLoginV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicSessionTokensDto>>;

    /**
     */
    localLoginV1(requestParameters: LocalLoginV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicSessionTokensDto>;

    /**
     * 
     * @param {string} strategy 
     * @param {ResetPasswordDto} resetPasswordDto 
     * @param {string} [xAuthProvider] 
     * @param {string} [xAuthStrategy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    localResetPasswordV1Raw(requestParameters: LocalResetPasswordV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    localResetPasswordV1(requestParameters: LocalResetPasswordV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} strategy 
     * @param {ResetVerifyDto} resetVerifyDto 
     * @param {string} [xAuthProvider] 
     * @param {string} [xAuthStrategy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    localResetVerifyV1Raw(requestParameters: LocalResetVerifyV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    localResetVerifyV1(requestParameters: LocalResetVerifyV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} strategy 
     * @param {SetPasswordDto} setPasswordDto 
     * @param {string} [xAuthProvider] 
     * @param {string} [xAuthStrategy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    localSetPasswordV1Raw(requestParameters: LocalSetPasswordV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicSessionTokensDto>>;

    /**
     */
    localSetPasswordV1(requestParameters: LocalSetPasswordV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicSessionTokensDto>;

    /**
     * 
     * @param {string} strategy 
     * @param {SignupDto} signupDto 
     * @param {string} [xAuthProvider] 
     * @param {string} [xAuthStrategy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    localSignupV1Raw(requestParameters: LocalSignupV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    localSignupV1(requestParameters: LocalSignupV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} strategy 
     * @param {VerifyDto} verifyDto 
     * @param {string} [xAuthProvider] 
     * @param {string} [xAuthStrategy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    localVerifyV1Raw(requestParameters: LocalVerifyV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicSessionTokensDto>>;

    /**
     */
    localVerifyV1(requestParameters: LocalVerifyV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicSessionTokensDto>;

    /**
     * 
     * @param {string} strategy 
     * @param {AuthOpenIdExchangeCallbackDto} authOpenIdExchangeCallbackDto 
     * @param {string} [xAuthProvider] 
     * @param {string} [xAuthStrategy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    openIdExchangeCallbackV1Raw(requestParameters: OpenIdExchangeCallbackV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicSessionTokensDto>>;

    /**
     */
    openIdExchangeCallbackV1(requestParameters: OpenIdExchangeCallbackV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicSessionTokensDto>;

    /**
     * 
     * @param {string} strategy 
     * @param {string} [xAuthProvider] 
     * @param {string} [xAuthStrategy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    openIdExchangeStartV1Raw(requestParameters: OpenIdExchangeStartV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicExchangeDto>>;

    /**
     */
    openIdExchangeStartV1(requestParameters: OpenIdExchangeStartV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicExchangeDto>;

    /**
     * 
     * @param {boolean} admin 
     * @param {string} [xAuthProvider] 
     * @param {string} [xAuthStrategy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    openIdFindStrategiesV1Raw(requestParameters: OpenIdFindStrategiesV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PublicAuthStrategyDto>>>;

    /**
     */
    openIdFindStrategiesV1(requestParameters: OpenIdFindStrategiesV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PublicAuthStrategyDto>>;

    /**
     * 
     * @param {string} strategy 
     * @param {AuthOpenIdLoginRedeemDto} authOpenIdLoginRedeemDto 
     * @param {string} [xAuthProvider] 
     * @param {string} [xAuthStrategy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    openIdLoginRedeemV1Raw(requestParameters: OpenIdLoginRedeemV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicSessionTokensDto>>;

    /**
     */
    openIdLoginRedeemV1(requestParameters: OpenIdLoginRedeemV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicSessionTokensDto>;

}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI implements AuthApiInterface {

    /**
     */
    async authAppleExchangeCallbackV2Raw(requestParameters: AuthAppleExchangeCallbackV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicSessionTokensDto>> {
        if (requestParameters['strategy'] == null) {
            throw new runtime.RequiredError(
                'strategy',
                'Required parameter "strategy" was null or undefined when calling authAppleExchangeCallbackV2().'
            );
        }

        if (requestParameters['authAppleExchangeCallbackDto'] == null) {
            throw new runtime.RequiredError(
                'authAppleExchangeCallbackDto',
                'Required parameter "authAppleExchangeCallbackDto" was null or undefined when calling authAppleExchangeCallbackV2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xAuthProvider'] != null) {
            headerParameters['x-auth-provider'] = String(requestParameters['xAuthProvider']);
        }

        if (requestParameters['xAuthStrategy'] != null) {
            headerParameters['x-auth-strategy'] = String(requestParameters['xAuthStrategy']);
        }

        const response = await this.request({
            path: `/v2/auth/apple/{strategy}/exchange`.replace(`{${"strategy"}}`, encodeURIComponent(String(requestParameters['strategy']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthAppleExchangeCallbackDtoToJSON(requestParameters['authAppleExchangeCallbackDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicSessionTokensDtoFromJSON(jsonValue));
    }

    /**
     */
    async authAppleExchangeCallbackV2(requestParameters: AuthAppleExchangeCallbackV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicSessionTokensDto> {
        const response = await this.authAppleExchangeCallbackV2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async authAppleExchangeStartV2Raw(requestParameters: AuthAppleExchangeStartV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicAuthAppleExchangeDto>> {
        if (requestParameters['strategy'] == null) {
            throw new runtime.RequiredError(
                'strategy',
                'Required parameter "strategy" was null or undefined when calling authAppleExchangeStartV2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAuthProvider'] != null) {
            headerParameters['x-auth-provider'] = String(requestParameters['xAuthProvider']);
        }

        if (requestParameters['xAuthStrategy'] != null) {
            headerParameters['x-auth-strategy'] = String(requestParameters['xAuthStrategy']);
        }

        const response = await this.request({
            path: `/v2/auth/apple/{strategy}/exchange`.replace(`{${"strategy"}}`, encodeURIComponent(String(requestParameters['strategy']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicAuthAppleExchangeDtoFromJSON(jsonValue));
    }

    /**
     */
    async authAppleExchangeStartV2(requestParameters: AuthAppleExchangeStartV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicAuthAppleExchangeDto> {
        const response = await this.authAppleExchangeStartV2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async authAppleExchangeV1Raw(requestParameters: AuthAppleExchangeV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicSessionTokensDto>> {
        if (requestParameters['strategy'] == null) {
            throw new runtime.RequiredError(
                'strategy',
                'Required parameter "strategy" was null or undefined when calling authAppleExchangeV1().'
            );
        }

        if (requestParameters['authAppleExchangeCallbackDto'] == null) {
            throw new runtime.RequiredError(
                'authAppleExchangeCallbackDto',
                'Required parameter "authAppleExchangeCallbackDto" was null or undefined when calling authAppleExchangeV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xAuthProvider'] != null) {
            headerParameters['x-auth-provider'] = String(requestParameters['xAuthProvider']);
        }

        if (requestParameters['xAuthStrategy'] != null) {
            headerParameters['x-auth-strategy'] = String(requestParameters['xAuthStrategy']);
        }

        const response = await this.request({
            path: `/v1/auth/apple/{strategy}`.replace(`{${"strategy"}}`, encodeURIComponent(String(requestParameters['strategy']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthAppleExchangeCallbackDtoToJSON(requestParameters['authAppleExchangeCallbackDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicSessionTokensDtoFromJSON(jsonValue));
    }

    /**
     */
    async authAppleExchangeV1(requestParameters: AuthAppleExchangeV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicSessionTokensDto> {
        const response = await this.authAppleExchangeV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async authAppleFindStrategiesV1Raw(requestParameters: AuthAppleFindStrategiesV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PublicAuthStrategyDto>>> {
        if (requestParameters['admin'] == null) {
            throw new runtime.RequiredError(
                'admin',
                'Required parameter "admin" was null or undefined when calling authAppleFindStrategiesV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['admin'] != null) {
            queryParameters['admin'] = requestParameters['admin'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAuthProvider'] != null) {
            headerParameters['x-auth-provider'] = String(requestParameters['xAuthProvider']);
        }

        if (requestParameters['xAuthStrategy'] != null) {
            headerParameters['x-auth-strategy'] = String(requestParameters['xAuthStrategy']);
        }

        const response = await this.request({
            path: `/v1/auth/apple`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PublicAuthStrategyDtoFromJSON));
    }

    /**
     */
    async authAppleFindStrategiesV1(requestParameters: AuthAppleFindStrategiesV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PublicAuthStrategyDto>> {
        const response = await this.authAppleFindStrategiesV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async authAppleLoginRedeemV1Raw(requestParameters: AuthAppleLoginRedeemV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicSessionTokensDto>> {
        if (requestParameters['strategy'] == null) {
            throw new runtime.RequiredError(
                'strategy',
                'Required parameter "strategy" was null or undefined when calling authAppleLoginRedeemV1().'
            );
        }

        if (requestParameters['authAppleLoginRedeemDto'] == null) {
            throw new runtime.RequiredError(
                'authAppleLoginRedeemDto',
                'Required parameter "authAppleLoginRedeemDto" was null or undefined when calling authAppleLoginRedeemV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xAuthProvider'] != null) {
            headerParameters['x-auth-provider'] = String(requestParameters['xAuthProvider']);
        }

        if (requestParameters['xAuthStrategy'] != null) {
            headerParameters['x-auth-strategy'] = String(requestParameters['xAuthStrategy']);
        }

        const response = await this.request({
            path: `/v1/auth/apple/{strategy}/login`.replace(`{${"strategy"}}`, encodeURIComponent(String(requestParameters['strategy']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthAppleLoginRedeemDtoToJSON(requestParameters['authAppleLoginRedeemDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicSessionTokensDtoFromJSON(jsonValue));
    }

    /**
     */
    async authAppleLoginRedeemV1(requestParameters: AuthAppleLoginRedeemV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicSessionTokensDto> {
        const response = await this.authAppleLoginRedeemV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async authAppleSetupV1Raw(requestParameters: AuthAppleSetupV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicAuthAppleExchangeDto>> {
        if (requestParameters['strategy'] == null) {
            throw new runtime.RequiredError(
                'strategy',
                'Required parameter "strategy" was null or undefined when calling authAppleSetupV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAuthProvider'] != null) {
            headerParameters['x-auth-provider'] = String(requestParameters['xAuthProvider']);
        }

        if (requestParameters['xAuthStrategy'] != null) {
            headerParameters['x-auth-strategy'] = String(requestParameters['xAuthStrategy']);
        }

        const response = await this.request({
            path: `/v1/auth/apple/{strategy}`.replace(`{${"strategy"}}`, encodeURIComponent(String(requestParameters['strategy']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicAuthAppleExchangeDtoFromJSON(jsonValue));
    }

    /**
     */
    async authAppleSetupV1(requestParameters: AuthAppleSetupV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicAuthAppleExchangeDto> {
        const response = await this.authAppleSetupV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async authFindStrategiesV1Raw(requestParameters: AuthFindStrategiesV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PublicAuthStrategyDto>>> {
        if (requestParameters['admin'] == null) {
            throw new runtime.RequiredError(
                'admin',
                'Required parameter "admin" was null or undefined when calling authFindStrategiesV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['admin'] != null) {
            queryParameters['admin'] = requestParameters['admin'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAuthProvider'] != null) {
            headerParameters['x-auth-provider'] = String(requestParameters['xAuthProvider']);
        }

        if (requestParameters['xAuthStrategy'] != null) {
            headerParameters['x-auth-strategy'] = String(requestParameters['xAuthStrategy']);
        }

        const response = await this.request({
            path: `/v1/auth`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PublicAuthStrategyDtoFromJSON));
    }

    /**
     */
    async authFindStrategiesV1(requestParameters: AuthFindStrategiesV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PublicAuthStrategyDto>> {
        const response = await this.authFindStrategiesV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async authGoogleExchangeCallbackV1Raw(requestParameters: AuthGoogleExchangeCallbackV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicSessionTokensDto>> {
        if (requestParameters['strategy'] == null) {
            throw new runtime.RequiredError(
                'strategy',
                'Required parameter "strategy" was null or undefined when calling authGoogleExchangeCallbackV1().'
            );
        }

        if (requestParameters['authGoogleExchangeCallbackDto'] == null) {
            throw new runtime.RequiredError(
                'authGoogleExchangeCallbackDto',
                'Required parameter "authGoogleExchangeCallbackDto" was null or undefined when calling authGoogleExchangeCallbackV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xAuthProvider'] != null) {
            headerParameters['x-auth-provider'] = String(requestParameters['xAuthProvider']);
        }

        if (requestParameters['xAuthStrategy'] != null) {
            headerParameters['x-auth-strategy'] = String(requestParameters['xAuthStrategy']);
        }

        const response = await this.request({
            path: `/v1/auth/google/{strategy}`.replace(`{${"strategy"}}`, encodeURIComponent(String(requestParameters['strategy']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthGoogleExchangeCallbackDtoToJSON(requestParameters['authGoogleExchangeCallbackDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicSessionTokensDtoFromJSON(jsonValue));
    }

    /**
     */
    async authGoogleExchangeCallbackV1(requestParameters: AuthGoogleExchangeCallbackV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicSessionTokensDto> {
        const response = await this.authGoogleExchangeCallbackV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async authGoogleExchangeCallbackV2Raw(requestParameters: AuthGoogleExchangeCallbackV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicSessionTokensDto>> {
        if (requestParameters['strategy'] == null) {
            throw new runtime.RequiredError(
                'strategy',
                'Required parameter "strategy" was null or undefined when calling authGoogleExchangeCallbackV2().'
            );
        }

        if (requestParameters['authGoogleExchangeCallbackDto'] == null) {
            throw new runtime.RequiredError(
                'authGoogleExchangeCallbackDto',
                'Required parameter "authGoogleExchangeCallbackDto" was null or undefined when calling authGoogleExchangeCallbackV2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xAuthProvider'] != null) {
            headerParameters['x-auth-provider'] = String(requestParameters['xAuthProvider']);
        }

        if (requestParameters['xAuthStrategy'] != null) {
            headerParameters['x-auth-strategy'] = String(requestParameters['xAuthStrategy']);
        }

        const response = await this.request({
            path: `/v2/auth/google/{strategy}/exchange`.replace(`{${"strategy"}}`, encodeURIComponent(String(requestParameters['strategy']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthGoogleExchangeCallbackDtoToJSON(requestParameters['authGoogleExchangeCallbackDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicSessionTokensDtoFromJSON(jsonValue));
    }

    /**
     */
    async authGoogleExchangeCallbackV2(requestParameters: AuthGoogleExchangeCallbackV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicSessionTokensDto> {
        const response = await this.authGoogleExchangeCallbackV2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async authGoogleExchangeStartV1Raw(requestParameters: AuthGoogleExchangeStartV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicAuthGoogleExchangeDto>> {
        if (requestParameters['strategy'] == null) {
            throw new runtime.RequiredError(
                'strategy',
                'Required parameter "strategy" was null or undefined when calling authGoogleExchangeStartV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAuthProvider'] != null) {
            headerParameters['x-auth-provider'] = String(requestParameters['xAuthProvider']);
        }

        if (requestParameters['xAuthStrategy'] != null) {
            headerParameters['x-auth-strategy'] = String(requestParameters['xAuthStrategy']);
        }

        const response = await this.request({
            path: `/v1/auth/google/{strategy}`.replace(`{${"strategy"}}`, encodeURIComponent(String(requestParameters['strategy']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicAuthGoogleExchangeDtoFromJSON(jsonValue));
    }

    /**
     */
    async authGoogleExchangeStartV1(requestParameters: AuthGoogleExchangeStartV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicAuthGoogleExchangeDto> {
        const response = await this.authGoogleExchangeStartV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async authGoogleExchangeStartV2Raw(requestParameters: AuthGoogleExchangeStartV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicAuthGoogleExchangeDto>> {
        if (requestParameters['strategy'] == null) {
            throw new runtime.RequiredError(
                'strategy',
                'Required parameter "strategy" was null or undefined when calling authGoogleExchangeStartV2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAuthProvider'] != null) {
            headerParameters['x-auth-provider'] = String(requestParameters['xAuthProvider']);
        }

        if (requestParameters['xAuthStrategy'] != null) {
            headerParameters['x-auth-strategy'] = String(requestParameters['xAuthStrategy']);
        }

        const response = await this.request({
            path: `/v2/auth/google/{strategy}/exchange`.replace(`{${"strategy"}}`, encodeURIComponent(String(requestParameters['strategy']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicAuthGoogleExchangeDtoFromJSON(jsonValue));
    }

    /**
     */
    async authGoogleExchangeStartV2(requestParameters: AuthGoogleExchangeStartV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicAuthGoogleExchangeDto> {
        const response = await this.authGoogleExchangeStartV2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async authGoogleFindStrategiesV1Raw(requestParameters: AuthGoogleFindStrategiesV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PublicAuthStrategyDto>>> {
        if (requestParameters['admin'] == null) {
            throw new runtime.RequiredError(
                'admin',
                'Required parameter "admin" was null or undefined when calling authGoogleFindStrategiesV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['admin'] != null) {
            queryParameters['admin'] = requestParameters['admin'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAuthProvider'] != null) {
            headerParameters['x-auth-provider'] = String(requestParameters['xAuthProvider']);
        }

        if (requestParameters['xAuthStrategy'] != null) {
            headerParameters['x-auth-strategy'] = String(requestParameters['xAuthStrategy']);
        }

        const response = await this.request({
            path: `/v1/auth/google`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PublicAuthStrategyDtoFromJSON));
    }

    /**
     */
    async authGoogleFindStrategiesV1(requestParameters: AuthGoogleFindStrategiesV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PublicAuthStrategyDto>> {
        const response = await this.authGoogleFindStrategiesV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async authGoogleLoginRedeemV1Raw(requestParameters: AuthGoogleLoginRedeemV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicSessionTokensDto>> {
        if (requestParameters['strategy'] == null) {
            throw new runtime.RequiredError(
                'strategy',
                'Required parameter "strategy" was null or undefined when calling authGoogleLoginRedeemV1().'
            );
        }

        if (requestParameters['authGoogleLoginRedeemDto'] == null) {
            throw new runtime.RequiredError(
                'authGoogleLoginRedeemDto',
                'Required parameter "authGoogleLoginRedeemDto" was null or undefined when calling authGoogleLoginRedeemV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xAuthProvider'] != null) {
            headerParameters['x-auth-provider'] = String(requestParameters['xAuthProvider']);
        }

        if (requestParameters['xAuthStrategy'] != null) {
            headerParameters['x-auth-strategy'] = String(requestParameters['xAuthStrategy']);
        }

        const response = await this.request({
            path: `/v1/auth/google/{strategy}/login`.replace(`{${"strategy"}}`, encodeURIComponent(String(requestParameters['strategy']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthGoogleLoginRedeemDtoToJSON(requestParameters['authGoogleLoginRedeemDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicSessionTokensDtoFromJSON(jsonValue));
    }

    /**
     */
    async authGoogleLoginRedeemV1(requestParameters: AuthGoogleLoginRedeemV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicSessionTokensDto> {
        const response = await this.authGoogleLoginRedeemV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async authLogoutV1Raw(requestParameters: AuthLogoutV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAuthProvider'] != null) {
            headerParameters['x-auth-provider'] = String(requestParameters['xAuthProvider']);
        }

        if (requestParameters['xAuthStrategy'] != null) {
            headerParameters['x-auth-strategy'] = String(requestParameters['xAuthStrategy']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/auth/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async authLogoutV1(requestParameters: AuthLogoutV1Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authLogoutV1Raw(requestParameters, initOverrides);
    }

    /**
     */
    async authRefreshV1Raw(requestParameters: AuthRefreshV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicSessionTokensDto>> {
        const queryParameters: any = {};

        if (requestParameters['refreshToken'] != null) {
            queryParameters['refreshToken'] = requestParameters['refreshToken'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xAuthProvider'] != null) {
            headerParameters['x-auth-provider'] = String(requestParameters['xAuthProvider']);
        }

        if (requestParameters['xAuthStrategy'] != null) {
            headerParameters['x-auth-strategy'] = String(requestParameters['xAuthStrategy']);
        }

        const response = await this.request({
            path: `/v1/auth/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RefreshDtoToJSON(requestParameters['refreshDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicSessionTokensDtoFromJSON(jsonValue));
    }

    /**
     */
    async authRefreshV1(requestParameters: AuthRefreshV1Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicSessionTokensDto> {
        const response = await this.authRefreshV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async localChangeEmailV1Raw(requestParameters: LocalChangeEmailV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['strategy'] == null) {
            throw new runtime.RequiredError(
                'strategy',
                'Required parameter "strategy" was null or undefined when calling localChangeEmailV1().'
            );
        }

        if (requestParameters['changeUnverifiedEmailDto'] == null) {
            throw new runtime.RequiredError(
                'changeUnverifiedEmailDto',
                'Required parameter "changeUnverifiedEmailDto" was null or undefined when calling localChangeEmailV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xAuthProvider'] != null) {
            headerParameters['x-auth-provider'] = String(requestParameters['xAuthProvider']);
        }

        if (requestParameters['xAuthStrategy'] != null) {
            headerParameters['x-auth-strategy'] = String(requestParameters['xAuthStrategy']);
        }

        const response = await this.request({
            path: `/v1/auth/local/{strategy}/change-unverified-email`.replace(`{${"strategy"}}`, encodeURIComponent(String(requestParameters['strategy']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeUnverifiedEmailDtoToJSON(requestParameters['changeUnverifiedEmailDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async localChangeEmailV1(requestParameters: LocalChangeEmailV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.localChangeEmailV1Raw(requestParameters, initOverrides);
    }

    /**
     */
    async localFindStrategiesV1Raw(requestParameters: LocalFindStrategiesV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PublicAuthStrategyDto>>> {
        if (requestParameters['admin'] == null) {
            throw new runtime.RequiredError(
                'admin',
                'Required parameter "admin" was null or undefined when calling localFindStrategiesV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['admin'] != null) {
            queryParameters['admin'] = requestParameters['admin'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAuthProvider'] != null) {
            headerParameters['x-auth-provider'] = String(requestParameters['xAuthProvider']);
        }

        if (requestParameters['xAuthStrategy'] != null) {
            headerParameters['x-auth-strategy'] = String(requestParameters['xAuthStrategy']);
        }

        const response = await this.request({
            path: `/v1/auth/local`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PublicAuthStrategyDtoFromJSON));
    }

    /**
     */
    async localFindStrategiesV1(requestParameters: LocalFindStrategiesV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PublicAuthStrategyDto>> {
        const response = await this.localFindStrategiesV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async localLoginV1Raw(requestParameters: LocalLoginV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicSessionTokensDto>> {
        if (requestParameters['strategy'] == null) {
            throw new runtime.RequiredError(
                'strategy',
                'Required parameter "strategy" was null or undefined when calling localLoginV1().'
            );
        }

        if (requestParameters['loginDto'] == null) {
            throw new runtime.RequiredError(
                'loginDto',
                'Required parameter "loginDto" was null or undefined when calling localLoginV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xAuthProvider'] != null) {
            headerParameters['x-auth-provider'] = String(requestParameters['xAuthProvider']);
        }

        if (requestParameters['xAuthStrategy'] != null) {
            headerParameters['x-auth-strategy'] = String(requestParameters['xAuthStrategy']);
        }

        const response = await this.request({
            path: `/v1/auth/local/{strategy}/login`.replace(`{${"strategy"}}`, encodeURIComponent(String(requestParameters['strategy']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginDtoToJSON(requestParameters['loginDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicSessionTokensDtoFromJSON(jsonValue));
    }

    /**
     */
    async localLoginV1(requestParameters: LocalLoginV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicSessionTokensDto> {
        const response = await this.localLoginV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async localResetPasswordV1Raw(requestParameters: LocalResetPasswordV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['strategy'] == null) {
            throw new runtime.RequiredError(
                'strategy',
                'Required parameter "strategy" was null or undefined when calling localResetPasswordV1().'
            );
        }

        if (requestParameters['resetPasswordDto'] == null) {
            throw new runtime.RequiredError(
                'resetPasswordDto',
                'Required parameter "resetPasswordDto" was null or undefined when calling localResetPasswordV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xAuthProvider'] != null) {
            headerParameters['x-auth-provider'] = String(requestParameters['xAuthProvider']);
        }

        if (requestParameters['xAuthStrategy'] != null) {
            headerParameters['x-auth-strategy'] = String(requestParameters['xAuthStrategy']);
        }

        const response = await this.request({
            path: `/v1/auth/local/{strategy}/reset`.replace(`{${"strategy"}}`, encodeURIComponent(String(requestParameters['strategy']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ResetPasswordDtoToJSON(requestParameters['resetPasswordDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async localResetPasswordV1(requestParameters: LocalResetPasswordV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.localResetPasswordV1Raw(requestParameters, initOverrides);
    }

    /**
     */
    async localResetVerifyV1Raw(requestParameters: LocalResetVerifyV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['strategy'] == null) {
            throw new runtime.RequiredError(
                'strategy',
                'Required parameter "strategy" was null or undefined when calling localResetVerifyV1().'
            );
        }

        if (requestParameters['resetVerifyDto'] == null) {
            throw new runtime.RequiredError(
                'resetVerifyDto',
                'Required parameter "resetVerifyDto" was null or undefined when calling localResetVerifyV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xAuthProvider'] != null) {
            headerParameters['x-auth-provider'] = String(requestParameters['xAuthProvider']);
        }

        if (requestParameters['xAuthStrategy'] != null) {
            headerParameters['x-auth-strategy'] = String(requestParameters['xAuthStrategy']);
        }

        const response = await this.request({
            path: `/v1/auth/local/{strategy}/verify`.replace(`{${"strategy"}}`, encodeURIComponent(String(requestParameters['strategy']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ResetVerifyDtoToJSON(requestParameters['resetVerifyDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async localResetVerifyV1(requestParameters: LocalResetVerifyV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.localResetVerifyV1Raw(requestParameters, initOverrides);
    }

    /**
     */
    async localSetPasswordV1Raw(requestParameters: LocalSetPasswordV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicSessionTokensDto>> {
        if (requestParameters['strategy'] == null) {
            throw new runtime.RequiredError(
                'strategy',
                'Required parameter "strategy" was null or undefined when calling localSetPasswordV1().'
            );
        }

        if (requestParameters['setPasswordDto'] == null) {
            throw new runtime.RequiredError(
                'setPasswordDto',
                'Required parameter "setPasswordDto" was null or undefined when calling localSetPasswordV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xAuthProvider'] != null) {
            headerParameters['x-auth-provider'] = String(requestParameters['xAuthProvider']);
        }

        if (requestParameters['xAuthStrategy'] != null) {
            headerParameters['x-auth-strategy'] = String(requestParameters['xAuthStrategy']);
        }

        const response = await this.request({
            path: `/v1/auth/local/{strategy}/reset`.replace(`{${"strategy"}}`, encodeURIComponent(String(requestParameters['strategy']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetPasswordDtoToJSON(requestParameters['setPasswordDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicSessionTokensDtoFromJSON(jsonValue));
    }

    /**
     */
    async localSetPasswordV1(requestParameters: LocalSetPasswordV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicSessionTokensDto> {
        const response = await this.localSetPasswordV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async localSignupV1Raw(requestParameters: LocalSignupV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['strategy'] == null) {
            throw new runtime.RequiredError(
                'strategy',
                'Required parameter "strategy" was null or undefined when calling localSignupV1().'
            );
        }

        if (requestParameters['signupDto'] == null) {
            throw new runtime.RequiredError(
                'signupDto',
                'Required parameter "signupDto" was null or undefined when calling localSignupV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xAuthProvider'] != null) {
            headerParameters['x-auth-provider'] = String(requestParameters['xAuthProvider']);
        }

        if (requestParameters['xAuthStrategy'] != null) {
            headerParameters['x-auth-strategy'] = String(requestParameters['xAuthStrategy']);
        }

        const response = await this.request({
            path: `/v1/auth/local/{strategy}/signup`.replace(`{${"strategy"}}`, encodeURIComponent(String(requestParameters['strategy']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignupDtoToJSON(requestParameters['signupDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async localSignupV1(requestParameters: LocalSignupV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.localSignupV1Raw(requestParameters, initOverrides);
    }

    /**
     */
    async localVerifyV1Raw(requestParameters: LocalVerifyV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicSessionTokensDto>> {
        if (requestParameters['strategy'] == null) {
            throw new runtime.RequiredError(
                'strategy',
                'Required parameter "strategy" was null or undefined when calling localVerifyV1().'
            );
        }

        if (requestParameters['verifyDto'] == null) {
            throw new runtime.RequiredError(
                'verifyDto',
                'Required parameter "verifyDto" was null or undefined when calling localVerifyV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xAuthProvider'] != null) {
            headerParameters['x-auth-provider'] = String(requestParameters['xAuthProvider']);
        }

        if (requestParameters['xAuthStrategy'] != null) {
            headerParameters['x-auth-strategy'] = String(requestParameters['xAuthStrategy']);
        }

        const response = await this.request({
            path: `/v1/auth/local/{strategy}/verify`.replace(`{${"strategy"}}`, encodeURIComponent(String(requestParameters['strategy']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyDtoToJSON(requestParameters['verifyDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicSessionTokensDtoFromJSON(jsonValue));
    }

    /**
     */
    async localVerifyV1(requestParameters: LocalVerifyV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicSessionTokensDto> {
        const response = await this.localVerifyV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async openIdExchangeCallbackV1Raw(requestParameters: OpenIdExchangeCallbackV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicSessionTokensDto>> {
        if (requestParameters['strategy'] == null) {
            throw new runtime.RequiredError(
                'strategy',
                'Required parameter "strategy" was null or undefined when calling openIdExchangeCallbackV1().'
            );
        }

        if (requestParameters['authOpenIdExchangeCallbackDto'] == null) {
            throw new runtime.RequiredError(
                'authOpenIdExchangeCallbackDto',
                'Required parameter "authOpenIdExchangeCallbackDto" was null or undefined when calling openIdExchangeCallbackV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xAuthProvider'] != null) {
            headerParameters['x-auth-provider'] = String(requestParameters['xAuthProvider']);
        }

        if (requestParameters['xAuthStrategy'] != null) {
            headerParameters['x-auth-strategy'] = String(requestParameters['xAuthStrategy']);
        }

        const response = await this.request({
            path: `/v1/auth/open-id/{strategy}/exchange`.replace(`{${"strategy"}}`, encodeURIComponent(String(requestParameters['strategy']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthOpenIdExchangeCallbackDtoToJSON(requestParameters['authOpenIdExchangeCallbackDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicSessionTokensDtoFromJSON(jsonValue));
    }

    /**
     */
    async openIdExchangeCallbackV1(requestParameters: OpenIdExchangeCallbackV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicSessionTokensDto> {
        const response = await this.openIdExchangeCallbackV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async openIdExchangeStartV1Raw(requestParameters: OpenIdExchangeStartV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicExchangeDto>> {
        if (requestParameters['strategy'] == null) {
            throw new runtime.RequiredError(
                'strategy',
                'Required parameter "strategy" was null or undefined when calling openIdExchangeStartV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAuthProvider'] != null) {
            headerParameters['x-auth-provider'] = String(requestParameters['xAuthProvider']);
        }

        if (requestParameters['xAuthStrategy'] != null) {
            headerParameters['x-auth-strategy'] = String(requestParameters['xAuthStrategy']);
        }

        const response = await this.request({
            path: `/v1/auth/open-id/{strategy}/exchange`.replace(`{${"strategy"}}`, encodeURIComponent(String(requestParameters['strategy']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicExchangeDtoFromJSON(jsonValue));
    }

    /**
     */
    async openIdExchangeStartV1(requestParameters: OpenIdExchangeStartV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicExchangeDto> {
        const response = await this.openIdExchangeStartV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async openIdFindStrategiesV1Raw(requestParameters: OpenIdFindStrategiesV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PublicAuthStrategyDto>>> {
        if (requestParameters['admin'] == null) {
            throw new runtime.RequiredError(
                'admin',
                'Required parameter "admin" was null or undefined when calling openIdFindStrategiesV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['admin'] != null) {
            queryParameters['admin'] = requestParameters['admin'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAuthProvider'] != null) {
            headerParameters['x-auth-provider'] = String(requestParameters['xAuthProvider']);
        }

        if (requestParameters['xAuthStrategy'] != null) {
            headerParameters['x-auth-strategy'] = String(requestParameters['xAuthStrategy']);
        }

        const response = await this.request({
            path: `/v1/auth/open-id`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PublicAuthStrategyDtoFromJSON));
    }

    /**
     */
    async openIdFindStrategiesV1(requestParameters: OpenIdFindStrategiesV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PublicAuthStrategyDto>> {
        const response = await this.openIdFindStrategiesV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async openIdLoginRedeemV1Raw(requestParameters: OpenIdLoginRedeemV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicSessionTokensDto>> {
        if (requestParameters['strategy'] == null) {
            throw new runtime.RequiredError(
                'strategy',
                'Required parameter "strategy" was null or undefined when calling openIdLoginRedeemV1().'
            );
        }

        if (requestParameters['authOpenIdLoginRedeemDto'] == null) {
            throw new runtime.RequiredError(
                'authOpenIdLoginRedeemDto',
                'Required parameter "authOpenIdLoginRedeemDto" was null or undefined when calling openIdLoginRedeemV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xAuthProvider'] != null) {
            headerParameters['x-auth-provider'] = String(requestParameters['xAuthProvider']);
        }

        if (requestParameters['xAuthStrategy'] != null) {
            headerParameters['x-auth-strategy'] = String(requestParameters['xAuthStrategy']);
        }

        const response = await this.request({
            path: `/v1/auth/open-id/{strategy}/login`.replace(`{${"strategy"}}`, encodeURIComponent(String(requestParameters['strategy']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthOpenIdLoginRedeemDtoToJSON(requestParameters['authOpenIdLoginRedeemDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicSessionTokensDtoFromJSON(jsonValue));
    }

    /**
     */
    async openIdLoginRedeemV1(requestParameters: OpenIdLoginRedeemV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicSessionTokensDto> {
        const response = await this.openIdLoginRedeemV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
