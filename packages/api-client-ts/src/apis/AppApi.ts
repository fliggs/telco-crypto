/* tslint:disable */
/* eslint-disable */
/**
 * Fliggs
 * This is our cool new API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface AppHelloV1Request {
    xAuthProvider?: string;
    xAuthStrategy?: string;
}

/**
 * AppApi - interface
 * 
 * @export
 * @interface AppApiInterface
 */
export interface AppApiInterface {
    /**
     * 
     * @param {string} [xAuthProvider] 
     * @param {string} [xAuthStrategy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApiInterface
     */
    appHelloV1Raw(requestParameters: AppHelloV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     */
    appHelloV1(requestParameters: AppHelloV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

}

/**
 * 
 */
export class AppApi extends runtime.BaseAPI implements AppApiInterface {

    /**
     */
    async appHelloV1Raw(requestParameters: AppHelloV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAuthProvider'] != null) {
            headerParameters['x-auth-provider'] = String(requestParameters['xAuthProvider']);
        }

        if (requestParameters['xAuthStrategy'] != null) {
            headerParameters['x-auth-strategy'] = String(requestParameters['xAuthStrategy']);
        }

        const response = await this.request({
            path: `/v1`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async appHelloV1(requestParameters: AppHelloV1Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.appHelloV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
